use std::collections::HashSet;
use gfa;
use fbox::graph::{self, genome_graph, cycles};

// TODO: make this a reference
fn foo<T>(g: gfa::gfa::GFA<usize, T>)
where
    T: gfa::optfields::OptFields,
{
    let (dp, x) = genome_graph::decompose_gfa(g);
    let back_edges = cycles::find_back_edges(&x);
    let s = graph::topological_sort::sort(&x);
    dbg!(back_edges, s);
}


#[cfg(test)]
mod tests {
    use super::*;

    pub const gfa_data: &str = "\n\
H	VN:Z:1.0\n\
S	1	CAGGAAACAGCTATGACCGTCCTTTTCTTGGAAGCGACAACAATTAGTTTTTAGGAAT\n\
S	2	T\n\
S	3	TAGCAAAACCAGCTACTTTATCATTGTAGATGTCAAAAGCCCTGTATACGACATCAGTACTAGTGCCTGTGCCGCACGGTGTAAGACGGGCTGCACTTACACCGCAAACCCGTTTAAAAACGATTGTGCATCAGCTGACTGAAGCATGGGTTCGCGGAGTTGATCACAACTACAGCCATAACCTTTCCACATACCGCAGACGGTACAGACTGTGTTTTTAAGTGTAAAACCCACAGGGTCATTAGCACAAGTTGTAGGTATTTGTACATACTTACCTTTTAAGTCACAAAATCCTTTAGGATTTGGATGATCTATGTGGCAACGGCAGTACAGACAACACGATGCACCACCAAAGGATTCTTGATCCATATTGGCTTCCGGTGTAACTGTTATTGCCTGACCAGTACCAGTGTGTGTACACAACATCTTAACACAATTAGTGATTGGTTGTCCCCCACTAGCTAGATAATCTTTGTAAGCTTTAGCAGCATCTACAGCAAAAGCACAGAAAGATAATACAGTTGAATTGGCAGGCACTTCTGTTGCATTACCAGCTTGTAGACGTACTGTGGCAGCTAAACTACCAAGTACCATACCTCTATTTAGGTTGTTTAATCCTTTAATAAAGTATAAATACTTCACTTTAGGACCTTTAGGTGTGTCTGTAACAAACCTACAAGGTGGTTCCAGTTCTGTATAGATAGTACCAGTTCCATCACTCTTAGGGAATCTAGCCCATTTCAAATCCTGTAAATCGGATAACAGTGCAAGTACAAACCTACCTCCCTTTGTTGTGTTGTAGTAAGCTAACGCATTGTCATCAGTGCAAGCAGTTTGTGTAGTACCGGCAGCACAAGACATCTGTCGTAGTGCAACAGGACTAAGCTCATTATTCTGTAATTTGACAGCAGAATTGGCCCTTAAAGCTGTTACAATAAGAGGCCATGCTAAATTAGGTGAATTGTCCATACTAATTTCACTAAGTTGAACAATTTTACTATCTGCATCTACAACCTGTTGGATTTCCCACAATGCTGATGCATAAGTAAATGTTGTACCATCACACGTATTTTTATATGTGTTATAGTCTGGTATGACAACCATTAGTTTGGCTGCTGTTGTAAGAGGTACT\n\
S	4	AA\n\
S	5	CCGTCGTTTTAC\n\
S	6	C\n\
S	7	GG\n\
L	1	+	2	+	0M\n\
L	1	+	3	+	0M\n\
L	1	+	6	+	0M\n\
L	2	+	3	+	0M\n\
L	3	+	4	+	0M\n\
L	3	+	5	+	0M\n\
L	3	+	7	+	0M\n\
L	4	+	5	+	0M\n\
L	6	+	3	+	0M\n\
L	7	+	5	+	0M\n\
P	seq1	1+,2+,3+,4+,5+	*\n\
P	seq2	1+,3+,5+	*\n\
P	seq3	1+,6+,3+,7+,5+	*\n\
";

    #[test]
    fn test_gfa() {
        let gfa: Vec<&[u8]> = gfa_data
			.lines()
			.map(|line| line.as_bytes())
			.collect();

        let x: std::vec::IntoIter<&[u8]> = gfa.into_iter();
		let parser: gfa::parser::GFAParser<usize, ()> = gfa::parser::GFAParser::new();
		let gfa = parser.parse_lines(x).unwrap();
        foo(gfa);
    }
}
